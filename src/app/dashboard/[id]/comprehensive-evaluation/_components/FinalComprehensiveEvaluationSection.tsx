import { FC, useState } from "react";

import Section from "@/app/dashboard/_components/Section";
import DataState from "@/app/dashboard/_components/DataState";
import { FinalEvaluationResponse } from "../_actions/get-final-evaluation";

interface FinalComprehensiveEvaluationSectionProps {
    isLoading?: boolean;
    isError?: boolean;
    categoryEvaluations?: FinalEvaluationResponse['category_evaluations'];
    onCategoryEvaluationUpdate?: (categoryId: number, newContent: string) => void;
    isCategoryEvaluationUpdating?: boolean;
    overallEvaluation?: FinalEvaluationResponse['overall_evaluation'];
    onOverallEvaluationUpdate?: (newContent: string) => void;
    isOverallUpdating?: boolean;
}

const FinalComprehensiveEvaluationSection: FC<FinalComprehensiveEvaluationSectionProps> = ({
    isLoading = false,
    isError = false,
    categoryEvaluations = [],
    onCategoryEvaluationUpdate,
    isCategoryEvaluationUpdating = false,
    overallEvaluation,
    onOverallEvaluationUpdate,
    isOverallUpdating = false
}) => {
    const [editingCategory, setEditingCategory] = useState<number | null>(null);
    const [editingOverall, setEditingOverall] = useState(false);
    const [editCategoryContent, setEditCategoryContent] = useState<Record<number, string>>({});
    const [editOverallContent, setEditOverallContent] = useState<string>('');

    const handleEditToggle = (categoryId: number, currentContent: string) => {
        if (editingCategory === categoryId) {
            // 완료 버튼 클릭 시 수정 내용 저장
            const newContent = editCategoryContent[categoryId] || currentContent;

            if (onCategoryEvaluationUpdate) {
                onCategoryEvaluationUpdate(categoryId, newContent);
            }

            setEditingCategory(null);
            setEditCategoryContent(prev => {
                const newState = { ...prev };
                delete newState[categoryId];
                return newState;
            });
        } else {
            // 수정 모드 진입
            setEditingCategory(categoryId);
            setEditCategoryContent(prev => ({
                ...prev,
                [categoryId]: currentContent
            }));
        }
    };

    const handleOverallEditToggle = () => {
        if (editingOverall) {
            // 완료 버튼 클릭 시 수정 내용 저장
            const newContent = editOverallContent || overallEvaluation || '';

            if (onOverallEvaluationUpdate) {
                onOverallEvaluationUpdate(newContent);
            }

            setEditingOverall(false);
            setEditOverallContent('');
        } else {
            // 수정 모드 진입
            setEditingOverall(true);
            setEditOverallContent(overallEvaluation || '');
        }
    };

    const getCategoryColor = (categoryName: string) => {
        const colors: Record<string, { bg: string; text: string; icon: string }> = {
            '학업역량': {
                bg: 'bg-amber-50',
                text: 'text-amber-700',
                icon: 'bg-amber-400'
            },
            '진로역량': {
                bg: 'bg-teal-50',
                text: 'text-teal-700',
                icon: 'bg-teal-400'
            },
            '공동체역량': {
                bg: 'bg-pink-50',
                text: 'text-pink-700',
                icon: 'bg-pink-400'
            }
        };
        return colors[categoryName] || {
            bg: 'bg-gray-50',
            text: 'text-gray-700',
            icon: 'bg-gray-400'
        };
    };

    return (
        <div className="space-y-6">
            <div id="category-evaluation-section">
                {/* 학생부 종합 분석 및 의견 섹션 */}
                <Section title="학생부 종합 분석 및 의견">
                    <DataState
                        isLoading={isLoading}
                        isError={isError}
                        isEmpty={!categoryEvaluations?.length}
                        loadingMessage="학생부 종합 의견을 불러오는 중입니다..."
                        errorMessage="학생부 종합 의견을 불러오는데 실패했습니다."
                        emptyMessage="등록된 학생부 종합 의견이 없습니다."
                    >
                        <div className="space-y-4 ml-2">
                            {categoryEvaluations?.map((category) => {
                                // 자동 생성 문구들을 하나의 텍스트로 연결
                                const autoGeneratedText = category.auto_generated_texts?.join('\n') || '';
                                const isEditing = editingCategory === category.main_category_id;
                                const color = getCategoryColor(category.category_name);
                                const currentContent = category.final_content || autoGeneratedText;
                                const displayContent = isEditing
                                    ? (editCategoryContent[category.main_category_id] || currentContent)
                                    : currentContent;

                                return (
                                    <div
                                        key={category.main_category_id}
                                        className="bg-gray-50 border border-gray-200 rounded-lg p-5"
                                    >
                                        <div className="flex items-center justify-between mb-4">
                                            <h4 className="text-xl font-semibold text-gray-800 flex items-center gap-3">
                                                <div className={`w-3 h-3 rounded-full ${color.icon}`} />
                                                {category.category_name}
                                            </h4>
                                            <button
                                                onClick={() => handleEditToggle(category.main_category_id, currentContent)}
                                                disabled={isCategoryEvaluationUpdating}
                                                className={`px-3 py-1 text-sm font-semibold rounded transition-colors ${isCategoryEvaluationUpdating
                                                    ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                                                    : isEditing
                                                        ? 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                                                        : 'bg-violet-100 text-violet-700 hover:bg-violet-200'
                                                    }`}
                                            >
                                                {isCategoryEvaluationUpdating ? (
                                                    <>
                                                        <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-current mr-1"></div>
                                                        저장 중...
                                                    </>
                                                ) : isEditing ? (
                                                    <>
                                                        완료
                                                    </>
                                                ) : (
                                                    <>
                                                        수정
                                                    </>
                                                )}
                                            </button>
                                        </div>

                                        <div className="space-y-3">
                                            <div
                                                className="bg-white border border-gray-200 rounded-lg p-5 hover:shadow-sm transition-shadow"
                                            >
                                                <div className="flex items-start gap-3">
                                                    <div className="flex-1 min-w-0">
                                                        {isEditing ? (
                                                            <textarea
                                                                className="w-full p-1 rounded-md focus:outline-none transition-all resize-none overflow-hidden"
                                                                placeholder="학생부 종합 의견 문구를 수정하세요..."
                                                                value={editCategoryContent[category.main_category_id] || currentContent}
                                                                onChange={(e) => {
                                                                    setEditCategoryContent(prev => ({
                                                                        ...prev,
                                                                        [category.main_category_id]: e.target.value
                                                                    }));
                                                                    e.currentTarget.style.height = 'auto'; // 핵심!
                                                                    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`; // 핵심!
                                                                }}
                                                                ref={(el) => {
                                                                    if (el) {
                                                                        el.style.height = 'auto';
                                                                        el.style.height = `${el.scrollHeight}px`;
                                                                    }
                                                                }}
                                                            />

                                                        ) : (
                                                            <div className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                                                                {displayContent || '학생부 종합 의견 문구가 없습니다.'}
                                                            </div>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                );
                            })}
                        </div>


                    </DataState>
                </Section>
            </div>

            <div id="overall-evaluation-section">
                {/* 최종평가 섹션 */}
                <Section title="최종 결과 및 의견">
                    <DataState
                        isLoading={isLoading}
                        isError={isError}
                        isEmpty={!overallEvaluation}
                        loadingMessage="전체 종합 의견을 불러오는 중입니다..."
                        errorMessage="전체 종합 의견을 불러오는데 실패했습니다."
                        emptyMessage="저장된 최종 종합 의견이 없습니다."
                    >
                        <div className="ml-2">
                            <div className="bg-gray-50 border border-gray-200 rounded-lg p-5">
                                <div className="flex items-center justify-between mb-4">
                                    <h4 className="text-xl font-semibold text-gray-800 flex items-center gap-3">
                                        <div className="w-3 h-3 rounded-full bg-red-400" />
                                        전체 종합 의견
                                    </h4>
                                    <button
                                        onClick={handleOverallEditToggle}
                                        disabled={isOverallUpdating}
                                        className={`px-3 py-1 text-sm font-semibold rounded flex items-center gap-1 transition-colors ${isOverallUpdating
                                            ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                                            : editingOverall
                                                ? 'bg-blue-100 text-blue-700 hover:bg-blue-200'
                                                : 'bg-violet-100 text-violet-700 hover:bg-violet-200'
                                            }`}
                                    >
                                        {isOverallUpdating ? (
                                            <>
                                                <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-current mr-1"></div>
                                                저장 중...
                                            </>
                                        ) : editingOverall ? (
                                            <>
                                                완료
                                            </>
                                        ) : overallEvaluation ? (
                                            <>
                                                수정
                                            </>
                                        ) : (
                                            <>
                                                작성하기
                                            </>
                                        )}
                                    </button>
                                </div>

                                <div className="bg-white border border-gray-200 rounded-lg p-5 hover:shadow-sm transition-shadow">
                                    <div className="flex items-start gap-3">
                                        <div className="flex-1 min-w-0">
                                            {editingOverall ? (
                                                <textarea
                                                    className="w-full p-1 rounded-md resize-none overflow-hidden focus:outline-none transition-all"
                                                    placeholder="전체 종합 의견을 입력하세요..."
                                                    value={editOverallContent}
                                                    onChange={(e) => {
                                                        setEditOverallContent(e.target.value);
                                                        e.currentTarget.style.height = 'auto';
                                                        e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;
                                                    }}
                                                    ref={(el) => {
                                                        if (el) {
                                                            el.style.height = 'auto';
                                                            el.style.height = `${el.scrollHeight}px`;
                                                        }
                                                    }}
                                                />

                                            ) : (
                                                <div className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                                                    {overallEvaluation || '작성된 전체 종합 의견이 없습니다.'}
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </DataState>
                </Section>
            </div>
        </div>
    );
};

export default FinalComprehensiveEvaluationSection;
import { FC, useState, useCallback } from "react";

import Section from "@/app/dashboard/_components/Section";
import DataState from "@/app/dashboard/_components/DataState";
import { FinalEvaluationResponse } from "@/app/types/comprehensiveEvaluation";
import CategoryEvaluationCard from "./CategoryEvaluationCard";

interface CategoryEvaluationSectionProps {
    isLoading?: boolean;
    isError?: boolean;
    categoryEvaluations?: FinalEvaluationResponse['category_evaluations'];
    onCategoryEvaluationUpdate?: (categoryId: number, newContent: string) => void;
    isCategoryEvaluationUpdating?: boolean;
}

const CategoryEvaluationSection: FC<CategoryEvaluationSectionProps> = ({
    isLoading = false,
    isError = false,
    categoryEvaluations = [],
    onCategoryEvaluationUpdate,
    isCategoryEvaluationUpdating = false,
}) => {
    const [editingCategory, setEditingCategory] = useState<number | null>(null);
    const [editCategoryContent, setEditCategoryContent] = useState<Record<number, string>>({});

    const handleCategoryEditToggle = useCallback((categoryId: number, currentContent: string) => {
        if (editingCategory === categoryId) {
            // 완료 버튼 클릭 시 수정 내용 저장
            const newContent = editCategoryContent[categoryId] || currentContent;

            if (onCategoryEvaluationUpdate) {
                onCategoryEvaluationUpdate(categoryId, newContent);
            }

            setEditingCategory(null);
            setEditCategoryContent(prev => {
                const newState = { ...prev };
                delete newState[categoryId];
                return newState;
            });
        } else {
            // 수정 모드 진입
            setEditingCategory(categoryId);
            setEditCategoryContent(prev => ({
                ...prev,
                [categoryId]: currentContent
            }));
        }
    }, [editingCategory, editCategoryContent, onCategoryEvaluationUpdate]);

    const handleContentChange = useCallback((categoryId: number, content: string) => {
        setEditCategoryContent(prev => ({
            ...prev,
            [categoryId]: content
        }));
    }, []);

    return (
        <div className="space-y-6">
            <Section title="학생부 종합 분석 및 의견">
                <DataState
                    isLoading={isLoading}
                    isError={isError}
                    isEmpty={!categoryEvaluations?.length}
                    loadingMessage="학생부 종합 의견을 불러오는 중입니다..."
                    errorMessage="학생부 종합 의견을 불러오는데 실패했습니다."
                    emptyMessage="등록된 학생부 종합 의견이 없습니다."
                >
                    <div className="space-y-4 ml-2">
                        {categoryEvaluations?.map((category) => {
                            const autoGeneratedContent = category.auto_generated_texts?.join('\n');
                            const currentContent = category.final_content || autoGeneratedContent || '';

                            const isEditing = editingCategory === category.main_category_id;
                            const editContent = editCategoryContent[category.main_category_id] || currentContent;

                            return (
                                <CategoryEvaluationCard
                                    key={category.main_category_id}
                                    category={category}
                                    isEditing={isEditing}
                                    isUpdating={isCategoryEvaluationUpdating}
                                    editContent={editContent}
                                    onEditToggle={handleCategoryEditToggle}
                                    onContentChange={handleContentChange}
                                />
                            );
                        })}
                    </div>
                </DataState>
            </Section>
        </div>
    );
};

export default CategoryEvaluationSection;